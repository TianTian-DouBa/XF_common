import pymssql
from datetime import datetime
from XF_common.XF_LOG_MANAGE import *

class DV_SOE():
    def __init__(self, server = 'localhost', db = 'EJournal'):
        """this 'localhost' is only able to work on station with SOE enabled"""
        self.conn = pymssql.connect(host=server + r'\DELTAV_CHRONICLE',
                       database=db)
        self.cursor = self.conn.cursor()
        self.sql = ''

    def enquiry(self, sql):
        """sql enquiry"""
        self.sql = sql
        self.cursor.execute(self.sql)
        result = self.cursor.fetchall()
        log_args = [sql]
        add_log(40, "fn:enquiry() -sql: {0[0]}", log_args)
        add_log(40, "fn:enquiry() -return start---------------------")
        if logable(40):
            for i in result:
                log_print(i)
        add_log(40, "fn:enquiry() -return end---------------------")
        return result

    def sql_batch_start(self, module, time_begin, frac_sec):
        """generate the sql to enquiry BATCH_START parameter time in UTC.
    -module: module name e.g. 'V1-COMMON'
    -time_begin: type datetime.datetime in UTC e.g. '2018-08-18 02:46:51'
    -frac_sec: FracSec in integer e.g. 5510, 720, 1970"""
        if not isinstance(time_begin, datetime):
            log_args = [time_begin]
            add_log(20, "fn:sql_batch_start() -time_begin 'cv: {0[0]}' is not instance of datetime.", log_args)
            return
        if module == None or module =='':
            add_log(20, "fn:sql_batch_start() -module is not valid.")
            return
        if (not isinstance(frac_sec, int)) or (frac_sec > 9999) or (frac_sec < 0):
            add_log(20, "fn:sql_batch_start() -frac_sec is not valid.")
            return

        time_str = time_begin.strftime("%Y-%m-%d %H:%M:%S")
        sql = (r"select Replace(Journal.Desc2, 'NEW VALUE = ', '')"
               r" as Desc2, Journal.Date_Time, Journal.FracSec From Journal"
               r" Where (Journal.Date_Time > '") + time_str + r"' Or (Journal.Date_Time = '" + time_str + r"' And"
        sql = sql + (r" Journal.FracSec > ") + str(frac_sec) + ")) And"
        sql = sql + (r" Journal.Desc2 Not Like '%None%' And"
                     r" Journal.Desc2 Not Like '' And"
                     r" Journal.Module Like '%") + module + "%' And"
        sql = sql + r" Journal.Attribute Like '%BATCH_START%'"
        return sql

    def db_names(self):
        """reteive all the accessable db names"""
        sql = r"Select name from Sys.Databases"
        _rslt = self.enquiry(sql)
        result = []
        for s in _rslt:
            result.append(s[0])
        if logable(40):
            log_print("fn:db_name return start-----------------------")
            for i in result:
                log_print(i)
            log_print("fn:db_name return end-----------------------")
        return result


    def close(self):
        """close connection"""
        self.conn.close()

if __name__ == "__main__":
    print("===================XF_SQ.__main__ start===================")

    dv_soe = DV_SOE()
    sql = (r"select Replace(Journal.Desc2, 'NEW VALUE = ', '')"
       r" as Desc2, Journal.Date_Time, Journal.FracSec From Journal"
       r" Where Journal.Date_Time > '10-JULY-2016' And"
       r" Journal.Desc2 Not Like '%None%' And"
       r" Journal.Desc2 Not Like '' And"
       r" Journal.Module Like '%V1-COMMON%' And"
       r" Journal.Attribute Like '%BATCH_START%'")
    result = dv_soe.enquiry(sql)
    dv_soe.close()
    dv_soe = None

    for i in result:
        print(i)

    print("=======================")
    dv_soe = DV_SOE()
    dt = datetime.strptime ("2018-08-19 02:15:17.0", "%Y-%m-%d %H:%M:%S.%f")
    sql = dv_soe.sql_batch_start('V1-COMMON', dt, 5561)
    if sql:
        result = dv_soe.enquiry(sql)
        dv_soe.close()
        for i in result:
            print(i)
    dv_soe = None

    print("=======================")
    dv_soe = DV_SOE()
    sql = r"Select name from Sys.Databases"
    result = dv_soe.enquiry(sql)
    dv_soe.close()
    dv_soe = None

    for i in result:
        print(i)

##dt_utc = rs[0][1]
##dt_local = utc_to_local(dt_utc)
##
##dt_utc = local_to_utc(dt_local)
##
##print(rs)
##print(dt_local)
##print(dt_local.strftime("%Y-%m-%d %H:%M:%S"))
##print(dt_utc)
##print(dt_utc.strftime("%Y-%m-%d %H:%M:%S"))
